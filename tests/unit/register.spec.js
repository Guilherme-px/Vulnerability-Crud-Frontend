import Vue from 'vue';
import Vuetify from 'vuetify';
Vue.use(Vuetify);

// Utilities
import { createLocalVue, mount } from '@vue/test-utils';

// Components
import Register from '@/views/Register.vue';

describe('Register.vue', () => {
    const localVue = createLocalVue();
    let vuetify;

    beforeEach(() => {
        vuetify = new Vuetify();
    });

    const mountFunction = (options) => {
        return mount(Register, {
            localVue,
            vuetify,
            ...options,
        });
    };

    it('should check if the component exists', () => {
        const wrapper = mountFunction();

        expect(wrapper.exists()).toBe(true);
    });

    it('should check if the component is visible', () => {
        const wrapper = mountFunction();

        expect(wrapper.isVisible()).toBe(true);
    });

    it('should display the registration text in an h2 tag', () => {
        const wrapper = mountFunction({
            propsData: { title: 'Cadastro' },
        });

        const title = wrapper.find('.login__title > h2');

        expect(title.text()).toBe('Cadastro');
    });

    it('should contain 3 text input', () => {
        const wrapper = mountFunction({});

        const textInput = wrapper.findAllComponents({ name: 'FormInput' });
        expect(textInput.length).toEqual(3);
    });

    it('should contain 2 select fields', () => {
        const wrapper = mountFunction({});

        const selectInput = wrapper.findAll('.v-select');
        expect(selectInput.length).toEqual(2);
    });

    it('should contain 1 file fields', () => {
        const wrapper = mountFunction({});

        const fileInput = wrapper.findAll('.v-file-input__text');
        expect(fileInput.length).toEqual(1);
    });

    it('should contain an input with the title label', () => {
        const wrapper = mountFunction({
            propsData: { label: 'Título' },
        });

        const label = wrapper.findAll('.v-label');
        expect(label.at(0).text()).toBe('Título');
    });

    it('should contain an input with the description label', () => {
        const wrapper = mountFunction({
            propsData: { label: 'Descrição' },
        });

        const label = wrapper.findAll('.v-label');
        expect(label.at(1).text()).toBe('Descrição');
    });

    it('should contain an input with the label Criticality degree', () => {
        const wrapper = mountFunction({
            propsData: { label: 'Grau de criticidade' },
        });

        const label = wrapper.findAll('.v-label');
        expect(label.at(2).text()).toBe('Grau de criticidade');
    });

    it('should contain an entry labeled Vulnerability Type', () => {
        const wrapper = mountFunction({
            propsData: { label: 'Tipo de vulnerabilidade' },
        });

        const label = wrapper.findAll('.v-label');
        expect(label.at(3).text()).toBe('Tipo de vulnerabilidade');
    });

    it('should contain an input with the label Proposed solution', () => {
        const wrapper = mountFunction({
            propsData: { label: 'Solução proposta' },
        });

        const label = wrapper.findAll('.v-label');
        expect(label.at(4).text()).toBe('Solução proposta');
    });

    it('should a button component', () => {
        const wrapper = mountFunction();

        const button = wrapper.findComponent({ name: 'FormBtns' });

        expect(button.exists()).toBe(true);
    });

    it('should have a visible button component', () => {
        const wrapper = mountFunction();

        const button = wrapper.findComponent({ name: 'FormBtns' });

        expect(button.isVisible()).toBe(true);
    });

    it('should contain a button named save and one named back', () => {
        const wrapper = mountFunction();

        const button = wrapper.findAll('.v-btn');

        expect(button.at(0).text()).toBe('Salvar');
        expect(button.at(1).text()).toBe('Voltar');
    });
});
